# PostgreSQL-enabled configuration with Nginx and HTTPS override for the registry service
#
# Requirements:
#
# 1. Env variables defined or put int .env file, for example:
#
#   WARG_NAMESPACE=supabase
#   WARG_CONTENT_BASE_URL=https://warg.supabase.com
#   WARG_OPERATOR_KEY=ecdsa-p256:SomeHashCode
#   WARG_WEB_SERVER_NAME=wrappers.supabase.com
#   WARG_API_SERVER_NAME=warg.supabase.com
#   POSTGRES_PASSWORD=postgres
#
# 2. HTTPS cert files are saved in:
#
#   ./nginx/ssl/fullchain.pem
#   ./nginx/ssl/privkey.pem

name: warg-server

services:
  api:
    build: .
    develop:
      watch:
        - path: .
          action: rebuild
    environment:
      WARG_NAMESPACE: "${WARG_NAMESPACE}"
      WARG_OPERATOR_KEY_FILE: /run/secrets/warg_operator_key
      WARG_DATA_STORE: postgres
      WARG_CONTENT_BASE_URL: "${WARG_CONTENT_BASE_URL}"
      WARG_DATABASE_URL: "postgres://warg:${POSTGRES_PASSWORD}@postgres:5432/warg"
    secrets:
      - warg_operator_key
    ports:
      - 8090:8090
    volumes:
      - content:/var/lib/warg-server/data
    depends_on:
      migration:
        condition: service_completed_successfully

  web:
    build: ./web
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    ports:
      - "127.0.0.1:3000:3000"
    depends_on:
      migration:
        condition: service_completed_successfully

  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf.template:/etc/nginx/conf.d/default.conf.template
      - ./nginx/ssl:/etc/nginx/ssl
    environment:
      WARG_WEB_SERVER_NAME: "${WARG_WEB_SERVER_NAME}"
      WARG_API_SERVER_NAME: "${WARG_API_SERVER_NAME}"
    command: /bin/sh -c "DOLLAR='$' envsubst < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
    depends_on:
      - web

  migration:
    build:
      context: .
      target: migration
    environment:
      DATABASE_URL: "postgres://warg:${POSTGRES_PASSWORD}@postgres:5432/warg"
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: warg
      POSTGRES_USER: warg
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "warg", "-U", "warg" ]
      start_period: 5s
      start_interval: 10s
      interval: 10s
      timeout: 5s
      retries: 5
    secrets:
      - postgres_password
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

secrets:
  postgres_password:
    environment: "POSTGRES_PASSWORD"
  warg_operator_key:
    environment: "WARG_OPERATOR_KEY"

volumes:
  postgres-data:
  content:
